// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKET_NETWORK_H_
#define FLATBUFFERS_GENERATED_PACKET_NETWORK_H_

#include "flatbuffers/flatbuffers.h"

namespace Network {

struct Packet;
struct PacketBuilder;

struct Packet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMBER = 4
  };
  float number() const {
    return GetField<float>(VT_NUMBER, 3.1415f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_NUMBER, 4) &&
           verifier.EndTable();
  }
};

struct PacketBuilder {
  typedef Packet Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_number(float number) {
    fbb_.AddElement<float>(Packet::VT_NUMBER, number, 3.1415f);
  }
  explicit PacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Packet>(end);
    return o;
  }
};

inline flatbuffers::Offset<Packet> CreatePacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    float number = 3.1415f) {
  PacketBuilder builder_(_fbb);
  builder_.add_number(number);
  return builder_.Finish();
}

inline const Network::Packet *GetPacket(const void *buf) {
  return flatbuffers::GetRoot<Network::Packet>(buf);
}

inline const Network::Packet *GetSizePrefixedPacket(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Network::Packet>(buf);
}

inline bool VerifyPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Network::Packet>(nullptr);
}

inline bool VerifySizePrefixedPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Network::Packet>(nullptr);
}

inline void FinishPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Network::Packet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Network::Packet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Network

#endif  // FLATBUFFERS_GENERATED_PACKET_NETWORK_H_
